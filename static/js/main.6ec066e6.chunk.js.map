{"version":3,"sources":["App.tsx","InputForm.tsx","Loading.tsx","LoginForm.tsx","Post.tsx","serviceWorker.js","index.js"],"names":["Screen","InputForm","props","_useState","useState","_useState2","Object","slicedToArray","content","setContent","react_default","a","createElement","onSubmit","e","preventDefault","console","log","concat","name","type","password","value","onChange","target","Loading","LoginForm","phrase","kp","KeyPair","fromSecretPhrase","Post","comments","setComments","post","data","map","comment","index","key","allowReply","_ref","asyncToGenerator","regenerator_default","mark","_callee","parent","newComment","wrap","_context","prev","next","id","commentdb","create","sent","stop","_x","apply","this","arguments","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","channel","postdb","node","AxiomAPI","network","verbose","createNode","database","state","screen","Initial","posts","keyPair","undefined","loading","setTimeout","loadMainView","push","sort","b","timestamp","getTime","setState","find","selector","commentlist","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","Main","_this2","getPublicKey","_callee2","_context2","setKeyPair","_this3","renderHeader","sortedComments","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ec066e6.chunk.js","sourcesContent":["import React from \"react\";\nimport AxiomAPI, { AxiomObject, Channel, Database, KeyPair } from \"axiom-api\";\n\nimport \"./App.css\";\nimport InputForm from \"./InputForm\";\nimport Loading from \"./Loading\";\nimport LoginForm from \"./LoginForm\";\nimport Post from \"./Post\";\n\nenum Screen {\n  Initial = 1,\n  Main\n}\n\ntype CommentMap = { [parent: string]: { [key: string]: AxiomObject } };\ntype AppProps = {};\ntype AppState = {\n  screen: Screen;\n  posts: AxiomObject[];\n  comments: CommentMap;\n  keyPair?: KeyPair;\n  loading: boolean;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  channel: Channel;\n  postdb: Database;\n  commentdb: Database;\n\n  constructor(props: AppProps) {\n    super(props);\n\n    let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n    let node = axiom.createNode();\n    this.channel = node.channel(\"Axboard\");\n    this.postdb = this.channel.database(\"Posts\");\n    this.commentdb = this.channel.database(\"Comments\");\n\n    this.state = {\n      screen: Screen.Initial,\n      posts: [],\n      comments: {},\n      keyPair: undefined,\n      loading: false\n    };\n\n    setTimeout(() => {\n      this.loadMainView();\n    }, 0);\n  }\n\n  sortedComments(parent: string): AxiomObject[] {\n    let comments = [];\n    for (let key in this.state.comments[parent]) {\n      comments.push(this.state.comments[parent][key]);\n    }\n    comments.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n    return comments;\n  }\n\n  async loadMainView(): Promise<void> {\n    this.setState({ loading: true });\n    let posts = await this.postdb.find({ selector: {} });\n    posts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    let commentlist = await this.commentdb.find({ selector: {} });\n    let comments: CommentMap = {};\n    for (let comment of commentlist) {\n      let parent = comment.data.parent;\n      if (!comments[parent]) {\n        comments[parent] = {};\n      }\n      comments[parent][comment.id] = comment;\n    }\n    this.setState({\n      screen: Screen.Main,\n      posts,\n      comments,\n      loading: false\n    });\n  }\n\n  renderHeader() {\n    if (this.state.keyPair) {\n      return (\n        <div>\n          <p>logged in as {this.state.keyPair.getPublicKey()}</p>\n          <InputForm\n            name={\"New post\"}\n            onSubmit={async content => {\n              let data = { content: content };\n              let post = await this.postdb.create(data);\n              this.setState(state => ({\n                posts: [post].concat(state.posts)\n              }));\n            }}\n          />\n        </div>\n      );\n    }\n    return (\n      <LoginForm\n        onSubmit={keyPair => {\n          this.channel.setKeyPair(keyPair);\n          this.setState({ keyPair });\n        }}\n      />\n    );\n  }\n\n  render() {\n    if (this.state.screen === Screen.Initial) {\n      return <Loading />;\n    }\n\n    return (\n      <div>\n        <h1>P2P Message Board Proof Of Concept</h1>\n        {this.renderHeader()}\n        {this.state.posts.map((post, index) => (\n          <Post\n            key={index}\n            post={post}\n            comments={this.sortedComments(post.id)}\n            commentdb={this.commentdb}\n            allowReply={!!this.state.keyPair}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\n\nexport default function InputForm(props: {\n  onSubmit: (content: string) => void;\n  name: string;\n  password?: boolean;\n}) {\n  let [content, setContent] = useState(\"\");\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(`submitting ${content}`);\n    props.onSubmit(content);\n    setContent(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {props.name}:<br />\n        <input\n          type={props.password ? \"password\" : \"text\"}\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport default function Loading() {\n  return <div>loading...</div>;\n}\n","import React from \"react\";\nimport { KeyPair } from \"axiom-api\";\n\nimport InputForm from \"./InputForm\";\n\nexport default function LoginForm(props: { onSubmit: (kp: KeyPair) => void }) {\n  return (\n    <InputForm\n      name={\"Log in with your passphrase to post or comment\"}\n      password={true}\n      onSubmit={phrase => {\n        let kp = KeyPair.fromSecretPhrase(phrase);\n        props.onSubmit(kp);\n      }}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { AxiomObject, Database } from \"axiom-api\";\n\nimport InputForm from \"./InputForm\";\n\nexport default function Post(props: {\n  post: AxiomObject;\n  comments: AxiomObject[];\n  commentdb: Database;\n  allowReply: boolean;\n}) {\n  let [comments, setComments] = useState(props.comments);\n  return (\n    <div>\n      <hr />\n      <p>Post: {props.post.data.content}</p>\n      {comments.map((comment, index) => (\n        <p key={index}>Comment: {comment.data.content}</p>\n      ))}\n      {props.allowReply && (\n        <InputForm\n          name={\"Reply\"}\n          onSubmit={async content => {\n            let parent = props.post.id;\n            let data = {\n              parent: parent,\n              content: content\n            };\n            let newComment = await props.commentdb.create(data);\n            setComments([newComment].concat(comments));\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}