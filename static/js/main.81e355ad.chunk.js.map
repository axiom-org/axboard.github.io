{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["PostList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","postdb","commentdb","channel","state","posts","comments","keyPair","undefined","onMessage","sm","message","type","key","signer","id","newPosts","objectSpread","setState","parent","data","newThread","newComments","push","sort","a","b","timestamp","localeCompare","_this2","react_default","createElement","getPublicKey","InputForm","name","onSubmit","content","create","LoginForm","setKeyPair","_this3","renderHeader","sortedPosts","map","index","Post","post","sortedComments","allowReply","React","Component","_useState","useState","_useState2","slicedToArray","setContent","e","preventDefault","console","log","concat","password","value","onChange","target","phrase","kp","KeyPair","fromSecretPhrase","Boolean","window","location","hostname","match","ReactDOM","render","AxiomAPI","network","verbose","createNode","database","className","App_PostList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81e355ad.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React, { useState } from \"react\";\nimport AxiomAPI, { Channel, Database, KeyPair, SignedMessage } from \"axiom-api\";\n\nexport default function App() {\n  let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n  let node = axiom.createNode();\n  let channel = node.channel(\"Axboard\");\n  let postdb = channel.database(\"Posts\");\n  let commentdb = channel.database(\"Comments\");\n\n  return (\n    <div className=\"App\">\n      <PostList postdb={postdb} commentdb={commentdb} channel={channel} />\n    </div>\n  );\n}\n\nclass PostList extends React.Component<\n  {\n    postdb: Database;\n    commentdb: Database;\n    channel: Channel;\n  },\n  {\n    posts: { [key: string]: SignedMessage };\n    comments: { [parent: string]: { [key: string]: SignedMessage } };\n    keyPair?: KeyPair;\n  }\n> {\n  postdb: Database;\n  commentdb: Database;\n  channel: Channel;\n\n  constructor(props: {\n    postdb: Database;\n    commentdb: Database;\n    channel: Channel;\n  }) {\n    super(props);\n\n    this.postdb = props.postdb;\n    this.commentdb = props.commentdb;\n    this.channel = props.channel;\n    this.state = {\n      posts: {},\n      comments: {},\n      keyPair: undefined\n    };\n\n    this.postdb.onMessage((sm: SignedMessage) => {\n      if (sm.message.type === \"Delete\") {\n        return;\n      }\n      let key = sm.signer + \":\" + sm.message.id;\n      let newPosts = { ...this.state.posts };\n      newPosts[key] = sm;\n      this.setState({ posts: newPosts });\n    });\n\n    this.commentdb.onMessage((sm: SignedMessage) => {\n      if (sm.message.type === \"Delete\") {\n        return;\n      }\n      let key = sm.signer + \":\" + sm.message.id;\n      let parent = sm.message.data.parent;\n      let newThread = { ...this.state.comments[parent] };\n      newThread[key] = sm;\n      let newComments = { ...this.state.comments };\n      newComments[parent] = newThread;\n      this.setState({ comments: newComments });\n    });\n  }\n\n  sortedPosts(): SignedMessage[] {\n    let posts = [];\n    for (let key in this.state.posts) {\n      posts.push(this.state.posts[key]);\n    }\n    posts.sort((a, b) =>\n      b.message.timestamp.localeCompare(a.message.timestamp)\n    );\n    return posts;\n  }\n\n  sortedComments(parent: string): SignedMessage[] {\n    let comments = [];\n    for (let key in this.state.comments[parent]) {\n      comments.push(this.state.comments[parent][key]);\n    }\n    comments.sort((a, b) =>\n      a.message.timestamp.localeCompare(b.message.timestamp)\n    );\n    return comments;\n  }\n\n  renderHeader() {\n    if (this.state.keyPair) {\n      return (\n        <div>\n          <p>logged in as {this.state.keyPair.getPublicKey()}</p>\n          <InputForm\n            name={\"New post\"}\n            onSubmit={content => {\n              let data = { content: content };\n              this.postdb.create(data);\n            }}\n          />\n        </div>\n      );\n    }\n    return (\n      <LoginForm\n        onSubmit={keyPair => {\n          this.channel.setKeyPair(keyPair);\n          this.setState({ keyPair });\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>P2P Message Board Proof Of Concept</h1>\n        {this.renderHeader()}\n        {this.sortedPosts().map((sm, index) => (\n          <Post\n            key={index}\n            post={sm}\n            comments={this.sortedComments(sm.signer + \":\" + sm.message.id)}\n            commentdb={this.commentdb}\n            allowReply={!!this.state.keyPair}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction Post(props: {\n  post: SignedMessage;\n  comments: SignedMessage[];\n  commentdb: Database;\n  allowReply: boolean;\n}) {\n  return (\n    <div>\n      <hr />\n      <p>Post: {props.post.message.data.content}</p>\n      {props.comments.map((sm, index) => (\n        <p key={index}>Comment: {sm.message.data.content}</p>\n      ))}\n      {props.allowReply && (\n        <InputForm\n          name={\"Reply\"}\n          onSubmit={content => {\n            let parent = props.post.signer + \":\" + props.post.message.id;\n            let data = {\n              parent: parent,\n              content: content\n            };\n            props.commentdb.create(data);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction InputForm(props: {\n  onSubmit: (content: string) => void;\n  name: string;\n  password?: boolean;\n}) {\n  let [content, setContent] = useState(\"\");\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(`submitting ${content}`);\n    props.onSubmit(content);\n    setContent(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {props.name}:<br />\n        <input\n          type={props.password ? \"password\" : \"text\"}\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\nfunction LoginForm(props: { onSubmit: (kp: KeyPair) => void }) {\n  return (\n    <InputForm\n      name={\"Log in with your passphrase to post or comment\"}\n      password={true}\n      onSubmit={phrase => {\n        let kp = KeyPair.fromSecretPhrase(phrase);\n        props.onSubmit(kp);\n      }}\n    />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}