{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","database","state","comments","setInterval","load","onMessage","sm","message","type","key","signer","id","newComments","objectSpread","setState","push","sort","a","b","timestamp","localeCompare","react_default","createElement","CommentForm","sortedComments","map","index","data","comment","React","Component","_useState","useState","_useState2","slicedToArray","setComment","onSubmit","e","preventDefault","console","log","concat","create","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","AxiomAPI","network","verbose","createNode","className","App_Chat","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yoCAgBMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,SAAWR,EAAMQ,SACtBP,EAAKQ,MAAQ,CACXC,SAAU,IAGZC,YAAY,WACVV,EAAKO,SAASI,QACb,KAEHX,EAAKO,SAASK,UAAU,SAAAC,GACtB,GAAwB,WAApBA,EAAGC,QAAQC,KAAf,CAGA,IAAIC,EAAMH,EAAGI,OAAS,IAAMJ,EAAGC,QAAQI,GACnCC,EAAWlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAQD,EAAKQ,MAAMC,UAClCU,EAAYH,GAAOH,EACnBb,EAAKqB,SAAS,CAAEZ,SAAUU,OAnBXnB,gFAwBjB,IAAIS,EAAW,GACf,IAAK,IAAIO,KAAOb,KAAKK,MAAMC,SACzBA,EAASa,KAAKnB,KAAKK,MAAMC,SAASO,IAKpC,OAHAP,EAASc,KAAK,SAACC,EAAGC,GAAJ,OACZD,EAAEV,QAAQY,UAAUC,cAAcF,EAAEX,QAAQY,aAEvCjB,mCAIP,OACEmB,EAAAJ,EAAAK,cAAA,WACED,EAAAJ,EAAAK,cAAA,uCACAD,EAAAJ,EAAAK,cAACC,EAAD,CAAavB,SAAUJ,KAAKI,WAC3BJ,KAAK4B,iBAAiBC,IAAI,SAACnB,EAAIoB,GAAL,OACzBL,EAAAJ,EAAAK,cAAA,KAAGb,IAAKiB,GAAQpB,EAAGC,QAAQoB,KAAKC,mBAzCvBC,IAAMC,WAgDzB,SAASP,EAAY/B,GAAO,IAAAuC,EACEC,mBAAS,IADXC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAqC,EAAA,GACrBH,EADqBK,EAAA,GACZE,EADYF,EAAA,GAa1B,OACEZ,EAAAJ,EAAAK,cAAA,QAAMc,SAXW,SAAAC,GACjBA,EAAEC,iBACFC,QAAQC,IAAR,cAAAC,OAA0Bb,IAC1B,IAAID,EAAO,CACTC,QAASA,GAEXO,EAAW,IACX3C,EAAMQ,SAAS0C,OAAOf,KAKpBN,EAAAJ,EAAAK,cAAA,wBAEED,EAAAJ,EAAAK,cAAA,WACAD,EAAAJ,EAAAK,cAAA,SACEd,KAAK,OACLmC,MAAOf,EACPgB,SAAU,SAAAP,GAAC,OAAIF,EAAWE,EAAEQ,OAAOF,WAGvCtB,EAAAJ,EAAAK,cAAA,SAAOd,KAAK,SAASmC,MAAM,YC5EbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAJ,EAAAK,cFFD,WACb,IAEItB,EAFQ,IAAIqD,IAAS,CAAEC,QAAS,QAASC,SAAS,IACrCC,aACGxD,SAAS,YAE7B,OACEqB,EAAAJ,EAAAK,cAAA,OAAKmC,UAAU,OACbpC,EAAAJ,EAAAK,cAACoC,EAAD,CAAM1D,SAAUA,MELN,MAAS2D,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16c9b637.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport AxiomAPI from \"axiom-api\";\nexport default function App() {\n  let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n  let node = axiom.createNode();\n  let database = node.database(\"comments\");\n\n  return (\n    <div className=\"App\">\n      <Chat database={database} />\n    </div>\n  );\n}\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.database = props.database;\n    this.state = {\n      comments: {}\n    };\n\n    setInterval(() => {\n      this.database.load();\n    }, 1000);\n\n    this.database.onMessage(sm => {\n      if (sm.message.type === \"Delete\") {\n        return;\n      }\n      let key = sm.signer + \":\" + sm.message.id;\n      let newComments = { ...this.state.comments };\n      newComments[key] = sm;\n      this.setState({ comments: newComments });\n    });\n  }\n\n  sortedComments() {\n    let comments = [];\n    for (let key in this.state.comments) {\n      comments.push(this.state.comments[key]);\n    }\n    comments.sort((a, b) =>\n      a.message.timestamp.localeCompare(b.message.timestamp)\n    );\n    return comments;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>P2P Chat Proof Of Concept</h1>\n        <CommentForm database={this.database} />\n        {this.sortedComments().map((sm, index) => (\n          <p key={index}>{sm.message.data.comment}</p>\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction CommentForm(props) {\n  let [comment, setComment] = useState(\"\");\n\n  let handleSubmit = e => {\n    e.preventDefault();\n    console.log(`submitting ${comment}`);\n    let data = {\n      comment: comment\n    };\n    setComment(\"\");\n    props.database.create(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Comment:\n        <br />\n        <input\n          type=\"text\"\n          value={comment}\n          onChange={e => setComment(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}