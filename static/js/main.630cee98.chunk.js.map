{"version":3,"sources":["DataContext.ts","InputForm.tsx","Loading.tsx","LoginForm.tsx","Util.ts","Post.tsx","PostDetail.tsx","App.tsx","serviceWorker.js","index.js"],"names":["DataContext","React","createContext","InputForm","props","_useState","useState","_useState2","Object","slicedToArray","content","setContent","react_default","a","createElement","onSubmit","e","preventDefault","console","log","concat","name","type","password","value","onChange","target","Loading","LoginForm","phrase","kp","KeyPair","fromSecretPhrase","ago","date","helper","num","term","ms","Date","getTime","seconds","Math","floor","minutes","hours","days","months","Post","comments","setComments","react_router_dom","to","post","id","data","timestamp","map","comment","index","key","allowReply","_ref","asyncToGenerator","regenerator_default","mark","_callee","parent","newComment","wrap","_context","prev","next","commentdb","create","sent","stop","_x","apply","this","arguments","PostDetail","useContext","Error","cmap","push","sort","b","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","channel","postdb","node","AxiomAPI","network","verbose","createNode","database","useFilter","age","state","posts","keyPair","undefined","loading","loadMainView","find","selector","commentlist","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","setState","_this2","getPublicKey","_callee2","_context2","setKeyPair","_this3","sortedComments","src_DataContext","Provider","app","renderHeader","react_router","path","render","_ref2","match","params","renderPostList","Component","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.630cee98.chunk.js","sourcesContent":["import React from \"react\";\nimport { AxiomObject, KeyPair } from \"axiom-api\";\n\nimport App from \"./App\";\n\ntype ObjectMap = { [id: string]: AxiomObject };\ntype CommentMap = { [parent: string]: ObjectMap };\n\ntype DataContextType = {\n  app?: App;\n  posts?: AxiomObject[];\n  comments?: CommentMap;\n  keyPair?: KeyPair;\n};\n\nconst DataContext = React.createContext<DataContextType>({});\n\nexport default DataContext;\n","import React, { useState } from \"react\";\n\nexport default function InputForm(props: {\n  onSubmit: (content: string) => void;\n  name: string;\n  password?: boolean;\n}) {\n  let [content, setContent] = useState(\"\");\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(`submitting ${content}`);\n    props.onSubmit(content);\n    setContent(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {props.name}:<br />\n        <input\n          type={props.password ? \"password\" : \"text\"}\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport default function Loading() {\n  return <div>loading...</div>;\n}\n","import React from \"react\";\nimport { KeyPair } from \"axiom-api\";\n\nimport InputForm from \"./InputForm\";\n\nexport default function LoginForm(props: { onSubmit: (kp: KeyPair) => void }) {\n  return (\n    <InputForm\n      name={\"Log in with your passphrase to post or comment\"}\n      password={true}\n      onSubmit={phrase => {\n        let kp = KeyPair.fromSecretPhrase(phrase);\n        props.onSubmit(kp);\n      }}\n    />\n  );\n}\n","// Creates a string like \"2 days ago\"\nexport function ago(date: Date): string {\n  let helper = (num: number, term: string) => {\n    if (num === 1) {\n      return `1 ${term} ago`;\n    }\n    return `${num} ${term}s ago`;\n  };\n\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  if (ms < 0) {\n    return \"in the future\";\n  }\n  if (ms < 1000) {\n    return \"just now\";\n  }\n  let seconds = Math.floor(ms / 1000);\n  if (seconds < 60) {\n    return helper(seconds, \"second\");\n  }\n  let minutes = Math.floor(seconds / 60);\n  if (minutes < 60) {\n    return helper(minutes, \"minute\");\n  }\n  let hours = Math.floor(minutes / 60);\n  if (hours < 24) {\n    return helper(hours, \"hour\");\n  }\n  let days = Math.floor(hours / 24);\n  if (days < 30) {\n    return helper(days, \"day\");\n  }\n  // This is a little bit inaccurate. Hopefully it's fine\n  let months = Math.floor(days / 30);\n  if (months < 12) {\n    return helper(months, \"month\");\n  }\n  let years = Math.floor(months / 12);\n  return helper(years, \"year\");\n}\n\nexport function daysAgo(date: Date): number {\n  let msPerDay = 1000 * 60 * 60 * 24;\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  return ms / msPerDay;\n}\n","import React, { useState } from \"react\";\nimport { AxiomObject, Database } from \"axiom-api\";\nimport { Link } from \"react-router-dom\";\n\nimport InputForm from \"./InputForm\";\nimport { ago } from \"./Util\";\n\nexport default function Post(props: {\n  post: AxiomObject;\n  comments: AxiomObject[];\n  commentdb: Database;\n  allowReply: boolean;\n}) {\n  let [comments, setComments] = useState(props.comments);\n  return (\n    <div>\n      <hr />\n      <p>\n        <Link to={\"/post/\" + props.post.id}>\n          Post: {props.post.data.content} (posted {ago(props.post.timestamp)})\n        </Link>\n      </p>\n      {comments.map((comment, index) => (\n        <p key={index}>\n          Comment: {comment.data.content} ({ago(comment.timestamp)})\n        </p>\n      ))}\n      {props.allowReply && (\n        <InputForm\n          name={\"Reply\"}\n          onSubmit={async content => {\n            let parent = props.post.id;\n            let data = {\n              parent: parent,\n              content: content\n            };\n            let newComment = await props.commentdb.create(data);\n            setComments([newComment].concat(comments));\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\n\nimport DataContext from \"./DataContext\";\nimport { ago } from \"./Util\";\n\nexport default function PostDetail(props: { id: string }) {\n  let data = useContext(DataContext);\n  if (!data.comments) {\n    throw new Error(\"TODO: need to reload\");\n  }\n\n  let cmap = data.comments[props.id];\n\n  let comments = [];\n  for (let key in cmap) {\n    comments.push(cmap[key]);\n  }\n  comments.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>Post Detail ({props.id})</h2>\n      {comments.map((comment, index) => (\n        <p key={index}>\n          Comment: {comment.data.content} ({ago(comment.timestamp)})\n        </p>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport AxiomAPI, { AxiomObject, Channel, Database, KeyPair } from \"axiom-api\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport DataContext from \"./DataContext\";\nimport InputForm from \"./InputForm\";\nimport Loading from \"./Loading\";\nimport LoginForm from \"./LoginForm\";\nimport Post from \"./Post\";\nimport PostDetail from \"./PostDetail\";\nimport { daysAgo } from \"./Util\";\n\ntype CommentMap = { [parent: string]: { [key: string]: AxiomObject } };\ntype AppProps = {};\ntype AppState = {\n  posts: AxiomObject[];\n  comments: CommentMap;\n  keyPair?: KeyPair;\n  loading: boolean;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  channel: Channel;\n  postdb: Database;\n  commentdb: Database;\n\n  constructor(props: AppProps) {\n    super(props);\n\n    let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n    let node = axiom.createNode();\n    this.channel = node.channel(\"Axboard\");\n\n    this.postdb = this.channel.database(\"Posts\");\n    let postFilter = (post: AxiomObject): boolean => {\n      let age = daysAgo(post.timestamp);\n      if (age > 2 || age < -0.05) {\n        return false;\n      }\n      return true;\n    };\n    this.postdb.useFilter(postFilter);\n\n    this.commentdb = this.channel.database(\"Comments\");\n\n    this.state = {\n      posts: [],\n      comments: {},\n      keyPair: undefined,\n      loading: true\n    };\n\n    // Async but no need to wait for a response\n    this.loadMainView();\n  }\n\n  sortedComments(parent: string): AxiomObject[] {\n    let comments = [];\n    for (let key in this.state.comments[parent]) {\n      comments.push(this.state.comments[parent][key]);\n    }\n    comments.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n    return comments;\n  }\n\n  async loadMainView(): Promise<void> {\n    let posts = await this.postdb.find({ selector: {} });\n    posts.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    let commentlist = await this.commentdb.find({ selector: {} });\n    let comments: CommentMap = {};\n    for (let comment of commentlist) {\n      let parent = comment.data.parent;\n      if (!comments[parent]) {\n        comments[parent] = {};\n      }\n      comments[parent][comment.id] = comment;\n    }\n    this.setState({\n      posts,\n      comments,\n      loading: false\n    });\n  }\n\n  renderHeader() {\n    if (this.state.keyPair) {\n      return (\n        <div>\n          <p>logged in as {this.state.keyPair.getPublicKey()}</p>\n          <InputForm\n            name={\"New post\"}\n            onSubmit={async content => {\n              let data = { content: content };\n              let post = await this.postdb.create(data);\n              this.setState(state => ({\n                posts: [post].concat(state.posts)\n              }));\n            }}\n          />\n        </div>\n      );\n    }\n    return (\n      <LoginForm\n        onSubmit={keyPair => {\n          this.channel.setKeyPair(keyPair);\n          this.setState({ keyPair });\n        }}\n      />\n    );\n  }\n\n  renderPostList() {\n    return (\n      <div>\n        <h2>Home Page</h2>\n        {this.state.posts.map((post, index) => (\n          <Post\n            key={index}\n            post={post}\n            comments={this.sortedComments(post.id)}\n            commentdb={this.commentdb}\n            allowReply={!!this.state.keyPair}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  renderPostDetail(id: string) {\n    return (\n      <div>\n        <h2>Post Detail ({id})</h2>\n        <p>TODO: implement me</p>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Loading />;\n    }\n\n    return (\n      <DataContext.Provider\n        value={{\n          app: this,\n          posts: this.state.posts,\n          comments: this.state.comments,\n          keyPair: this.state.keyPair\n        }}\n      >\n        <div>\n          <h1>Axboard</h1>\n          {this.renderHeader()}\n          <Router>\n            <Switch>\n              <Route\n                path=\"/post/:id\"\n                render={({ match }) => <PostDetail id={match.params.id} />}\n              />\n              <Route path=\"/\">{this.renderPostList()}</Route>\n            </Switch>\n          </Router>\n        </div>\n      </DataContext.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}