{"version":3,"sources":["DataContext.ts","InputForm.tsx","NewPost.tsx","Header.tsx","UserReference.tsx","Util.ts","PostSummary.tsx","PostList.tsx","HomePage.tsx","Loading.tsx","LoginForm.tsx","ReplyForm.tsx","PostDetail.tsx","UserDetail.tsx","VoteSet.ts","App.tsx","serviceWorker.js","index.js"],"names":["DataContext","React","createContext","useDataContext","dc","useContext","Error","InputForm","props","_useState","useState","_useState2","Object","slicedToArray","content","setContent","react_default","a","createElement","onSubmit","e","preventDefault","console","log","concat","name","type","password","value","onChange","target","NewPost","data","id","setID","length","react_router","to","username","author","_ref","asyncToGenerator","regenerator_default","mark","_callee","post","wrap","_context","prev","next","app","createPost","board","sent","stop","_x","apply","this","arguments","Header","keyPair","getPublicKey","onClick","logout","react_router_dom","UserReference","publicKey","ago","date","helper","num","term","ms","Date","getTime","seconds","Math","floor","minutes","hours","days","months","PostSummary","comments","numComments","keys","commentsPhrase","owner","timestamp","votes","getScore","upvote","downvote","PostList","posts","map","index","key","HomePage","postlist","push","sort","b","Loading","LoginForm","setUsername","_useState3","_useState4","passphrase","setPassphrase","login","alert","ReplyForm","createComment","parent","PostDetail","cmap","comment","UserDetail","VoteSet","classCallCheck","karma","score","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","vote","addVote","err","return","delta","abs","removeVote","modify","forget","App","_this","possibleConstructorReturn","getPrototypeOf","call","channel","postdb","commentdb","votedb","node","AxiomAPI","network","verbose","createNode","database","useFilter","age","state","loading","loadData","setTimeout","window","localStorage","getItem","find","selector","commentlist","_iterator2","_iteratorNormalCompletion2","_step2","votelist","setState","args","create","newPosts","objectSpread","newCommentSubmap","newComments","forceUpdate","test","KeyPair","fromSecretPhrase","setKeyPair","setItem","removeItem","src_DataContext","Provider","path","render","match","params","_ref2","Component","Boolean","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e8121f2.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { AxiomObject, KeyPair } from \"axiom-api\";\n\nimport App from \"./App\";\nimport VoteSet from \"./VoteSet\";\n\ntype ObjectMap = { [id: string]: AxiomObject };\ntype CommentMap = { [parent: string]: ObjectMap };\n\ntype DataContextType = {\n  app: App;\n  posts: ObjectMap;\n  comments: CommentMap;\n  votes: VoteSet;\n  username?: string;\n  keyPair?: KeyPair;\n};\n\nconst DataContext = React.createContext<DataContextType | null>(null);\n\nexport default DataContext;\n\nexport function useDataContext(): DataContextType {\n  let dc = useContext(DataContext);\n  if (dc === null) {\n    throw new Error(\"null context causes trouble\");\n  }\n  return dc;\n}\n","import React, { useState } from \"react\";\n\nexport default function InputForm(props: {\n  onSubmit: (content: string) => void;\n  name: string;\n  password?: boolean;\n}) {\n  let [content, setContent] = useState(\"\");\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(`submitting ${content}`);\n    props.onSubmit(content);\n    setContent(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {props.name}:<br />\n        <input\n          type={props.password ? \"password\" : \"text\"}\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\nimport InputForm from \"./InputForm\";\n\nexport default function NewPost(props: { board: string }) {\n  let data = useDataContext();\n  let [id, setID] = useState(\"\");\n\n  if (id.length > 0) {\n    return <Redirect to={`/post/${id}`} />;\n  }\n\n  if (!data.username) {\n    return <div>log in to post</div>;\n  }\n  let author: string = data.username;\n\n  return (\n    <InputForm\n      name={\"New post\"}\n      onSubmit={async content => {\n        let post = await data.app.createPost({\n          author: author,\n          board: props.board,\n          content: content\n        });\n        setID(post.id);\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\nimport NewPost from \"./NewPost\";\n\nexport default function Header() {\n  let data = useDataContext();\n\n  if (!data.keyPair) {\n    return <Link to={\"/login\"}>log in</Link>;\n  }\n  return (\n    <div>\n      <p>logged in as {data.keyPair.getPublicKey()}</p>\n      <div onClick={() => data.app.logout()}>log out</div>\n      <NewPost board=\"none\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function UserReference(props: {\n  username?: string;\n  publicKey: string;\n}) {\n  let username = props.username || \"anonymous\";\n  return <Link to={`/u/${username}/${props.publicKey}`}>{username}</Link>;\n}\n","// Creates a string like \"2 days ago\"\nexport function ago(date: Date): string {\n  let helper = (num: number, term: string) => {\n    if (num === 1) {\n      return `1 ${term} ago`;\n    }\n    return `${num} ${term}s ago`;\n  };\n\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  if (ms < 0) {\n    return \"in the future\";\n  }\n  if (ms < 1000) {\n    return \"just now\";\n  }\n  let seconds = Math.floor(ms / 1000);\n  if (seconds < 60) {\n    return helper(seconds, \"second\");\n  }\n  let minutes = Math.floor(seconds / 60);\n  if (minutes < 60) {\n    return helper(minutes, \"minute\");\n  }\n  let hours = Math.floor(minutes / 60);\n  if (hours < 24) {\n    return helper(hours, \"hour\");\n  }\n  let days = Math.floor(hours / 24);\n  if (days < 30) {\n    return helper(days, \"day\");\n  }\n  // This is a little bit inaccurate. Hopefully it's fine\n  let months = Math.floor(days / 30);\n  if (months < 12) {\n    return helper(months, \"month\");\n  }\n  let years = Math.floor(months / 12);\n  return helper(years, \"year\");\n}\n\nexport function daysAgo(date: Date): number {\n  let msPerDay = 1000 * 60 * 60 * 24;\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  return ms / msPerDay;\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\nimport { Link } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\nimport UserReference from \"./UserReference\";\nimport { ago } from \"./Util\";\n\nexport default function PostSummary(props: { post: AxiomObject }) {\n  let data = useDataContext();\n  let comments = data.comments[props.post.id];\n  let numComments = comments ? Object.keys(comments).length : 0;\n  let commentsPhrase = `${numComments} comment${numComments === 1 ? \"\" : \"s\"}`;\n\n  return (\n    <div>\n      <hr />\n      {props.post.data.content}\n      <div>\n        posted by{\" \"}\n        <UserReference\n          username={props.post.data.author}\n          publicKey={props.post.owner}\n        />{\" \"}\n        {ago(props.post.timestamp)}\n      </div>\n      <Link to={`/post/${props.post.id}`}>{commentsPhrase}</Link>\n      <div>score: {data.votes.getScore(props.post.id)}</div>\n      <div onClick={() => data.app.upvote(props.post.id)}>upvote</div>\n      <div onClick={() => data.app.downvote(props.post.id)}>downvote</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\n\nimport PostSummary from \"./PostSummary\";\n\nexport default function PostList(props: { posts: AxiomObject[] }) {\n  return (\n    <div>\n      {props.posts.map((post, index) => {\n        return <PostSummary key={index} post={post} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport PostList from \"./PostList\";\n\nexport default function HomePage() {\n  let data = useDataContext();\n  let postlist = [];\n  for (let id in data.posts) {\n    let post = data.posts[id];\n    postlist.push(post);\n  }\n  postlist.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>Home Page</h2>\n      <PostList posts={postlist} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Loading() {\n  return <div>loading...</div>;\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\n\nexport default function LoginForm() {\n  let data = useDataContext();\n  let [username, setUsername] = useState(\"\");\n  let [passphrase, setPassphrase] = useState(\"\");\n\n  if (data.keyPair) {\n    // Already logged in\n    return <Redirect to=\"/\" />;\n  }\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    // TODO: focus the first empty field if there is one\n    try {\n      data.app.login(username, passphrase);\n    } catch (e) {\n      // TODO: display this more nicely\n      alert(e);\n      setUsername(\"\");\n      setPassphrase(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        username:\n        <br />\n        <input\n          type=\"text\"\n          value={username}\n          onChange={e => setUsername(e.target.value)}\n        />\n      </label>\n      <br />\n      <label>\n        passphrase:\n        <br />\n        <input\n          type=\"password\"\n          value={passphrase}\n          onChange={e => setPassphrase(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"log in\" />\n    </form>\n  );\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\n\nimport { useDataContext } from \"./DataContext\";\nimport InputForm from \"./InputForm\";\n\nexport default function ReplyForm(props: { post: AxiomObject }) {\n  let data = useDataContext();\n  if (!data.username) {\n    return null;\n  }\n  let author: string = data.username;\n\n  return (\n    <InputForm\n      name={\"Reply\"}\n      onSubmit={async content => {\n        await data.app.createComment({\n          author,\n          board: props.post.data.board,\n          content,\n          parent: props.post.id\n        });\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport ReplyForm from \"./ReplyForm\";\nimport UserReference from \"./UserReference\";\nimport { ago } from \"./Util\";\n\nexport default function PostDetail(props: { id: string }) {\n  let data = useDataContext();\n  let post = data.posts[props.id];\n  if (!post) {\n    return <div>post not found</div>;\n  }\n  let cmap = data.comments[props.id];\n\n  let comments = [];\n  for (let key in cmap) {\n    comments.push(cmap[key]);\n  }\n  comments.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>Post Detail ({props.id})</h2>\n      {post.data.content}\n      {comments.map((comment, index) => (\n        <p key={index}>\n          Comment: {comment.data.content}\n          <br />\n          by{\" \"}\n          <UserReference\n            username={comment.data.author}\n            publicKey={comment.owner}\n          />{\" \"}\n          ({ago(comment.timestamp)})\n        </p>\n      ))}\n      <ReplyForm post={post} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport PostList from \"./PostList\";\n\nexport default function UserDetail(props: { name: string; publicKey: string }) {\n  let data = useDataContext();\n\n  let postlist = [];\n  for (let id in data.posts) {\n    let post = data.posts[id];\n    if (post.owner === props.publicKey) {\n      postlist.push(post);\n    }\n  }\n  postlist.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>\n        posts from {props.name} ({props.publicKey}\n        ):\n      </h2>\n      <PostList posts={postlist} />\n    </div>\n  );\n}\n","import { AxiomObject } from \"axiom-api\";\n\nexport default class VoteSet {\n  // Karma for each user\n  karma: { [publicKey: string]: number };\n\n  // Score for each object voted on\n  score: { [id: string]: number };\n\n  // Keyed by owner:target\n  votes: { [key: string]: AxiomObject };\n\n  constructor(votes: AxiomObject[]) {\n    this.karma = {};\n    this.score = {};\n    this.votes = {};\n\n    for (let vote of votes) {\n      this.addVote(vote);\n    }\n  }\n\n  modify(target: string, owner: string, delta: number) {\n    if (this.score[target]) {\n      this.score[target] += delta;\n    } else {\n      this.score[target] = delta;\n    }\n\n    if (this.karma[owner]) {\n      this.karma[owner] += delta;\n    } else {\n      this.karma[owner] = delta;\n    }\n  }\n\n  getScore(id: string): number {\n    return this.score[id] || 0;\n  }\n\n  getKarma(publicKey: string): number {\n    return this.karma[publicKey] || 0;\n  }\n\n  getVote(owner: string, target: string): AxiomObject | null {\n    let key = `${owner}:${target}`;\n    return this.votes[key] || null;\n  }\n\n  addVote(vote: AxiomObject) {\n    if (Math.abs(vote.data.score) !== 1 || !vote.data.target) {\n      return;\n    }\n\n    let key = `${vote.owner}:${vote.data.target}`;\n    if (this.votes[key]) {\n      this.removeVote(this.votes[key]);\n    }\n    this.modify(vote.data.target, vote.owner, vote.data.score);\n    this.votes[key] = vote;\n  }\n\n  removeVote(vote: AxiomObject) {\n    let key = `${vote.owner}:${vote.data.target}`;\n    if (this.votes[key] !== vote) {\n      console.log(\"bad removeVote\");\n      return;\n    }\n\n    delete this.votes[key];\n    this.modify(vote.data.target, vote.owner, -vote.data.score);\n    vote.forget();\n  }\n}\n","import React from \"react\";\nimport AxiomAPI, { AxiomObject, Channel, Database, KeyPair } from \"axiom-api\";\nimport { HashRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport DataContext from \"./DataContext\";\nimport Header from \"./Header\";\nimport HomePage from \"./HomePage\";\nimport Loading from \"./Loading\";\nimport LoginForm from \"./LoginForm\";\nimport PostDetail from \"./PostDetail\";\nimport UserDetail from \"./UserDetail\";\nimport { daysAgo } from \"./Util\";\nimport VoteSet from \"./VoteSet\";\n\ntype ObjectMap = { [id: string]: AxiomObject };\ntype CommentMap = { [parent: string]: ObjectMap };\ntype AppProps = {};\ntype AppState = {\n  posts: ObjectMap;\n  comments: CommentMap;\n  votes: VoteSet;\n  keyPair?: KeyPair;\n  username?: string;\n  loading: boolean;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  channel: Channel;\n  postdb: Database;\n  commentdb: Database;\n  votedb: Database;\n\n  constructor(props: AppProps) {\n    super(props);\n\n    let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n    let node = axiom.createNode();\n    this.channel = node.channel(\"Axboard\");\n\n    this.postdb = this.channel.database(\"Posts\");\n    let postFilter = (post: AxiomObject): boolean => {\n      let age = daysAgo(post.timestamp);\n      if (age > 2 || age < -0.05) {\n        return false;\n      }\n      return true;\n    };\n    this.postdb.useFilter(postFilter);\n\n    this.commentdb = this.channel.database(\"Comments\");\n    this.votedb = this.channel.database(\"Votes\");\n\n    this.state = {\n      posts: {},\n      comments: {},\n      votes: new VoteSet([]),\n      keyPair: undefined,\n      username: undefined,\n      loading: true\n    };\n\n    // Async but no need to wait for a response\n    this.loadData();\n\n    // Must be async because it can call setState. TODO: refactor and avoid\n    setTimeout(() => {\n      let username = window.localStorage.getItem(\"username\");\n      let passphrase = window.localStorage.getItem(\"passphrase\");\n      if (username && passphrase) {\n        this.login(username, passphrase);\n      }\n    }, 0);\n  }\n\n  async loadData(): Promise<void> {\n    let postlist = await this.postdb.find({ selector: {} });\n    let posts: ObjectMap = {};\n    for (let post of postlist) {\n      posts[post.id] = post;\n    }\n\n    let commentlist = await this.commentdb.find({ selector: {} });\n    let comments: CommentMap = {};\n    for (let comment of commentlist) {\n      let parent = comment.data.parent;\n      if (!comments[parent]) {\n        comments[parent] = {};\n      }\n      comments[parent][comment.id] = comment;\n    }\n\n    let votelist = await this.votedb.find({ selector: {} });\n    let votes = new VoteSet(votelist);\n\n    this.setState({\n      posts,\n      comments,\n      votes,\n      loading: false\n    });\n  }\n\n  async createPost(args: {\n    author: string;\n    board: string;\n    content: string;\n  }): Promise<AxiomObject> {\n    let post = await this.postdb.create(args);\n    this.setState(state => {\n      let newPosts = { ...state.posts };\n      newPosts[post.id] = post;\n      return { ...state, posts: newPosts };\n    });\n    return post;\n  }\n\n  async createComment(args: {\n    author: string;\n    board: string;\n    content: string;\n    parent: string;\n  }): Promise<AxiomObject> {\n    let comment = await this.commentdb.create(args);\n    this.setState(state => {\n      let newCommentSubmap = { ...state.comments[args.parent] };\n      newCommentSubmap[comment.id] = comment;\n      let newComments = { ...state.comments };\n      newComments[args.parent] = newCommentSubmap;\n      return { ...state, comments: newComments };\n    });\n    return comment;\n  }\n\n  async vote(args: { target: string; score: number }): Promise<AxiomObject> {\n    let vote = await this.votedb.create(args);\n    this.state.votes.addVote(vote);\n    this.forceUpdate();\n    return vote;\n  }\n\n  async upvote(target: string): Promise<AxiomObject> {\n    return await this.vote({ target, score: 1 });\n  }\n\n  async downvote(target: string): Promise<AxiomObject> {\n    return await this.vote({ target, score: -1 });\n  }\n\n  login(username: string, passphrase: string) {\n    let regex = /^[A-Za-z0-9_]+$/;\n    if (!regex.test(username)) {\n      throw new Error(`invalid username: ${username}`);\n    }\n    let keyPair = KeyPair.fromSecretPhrase(username + \";\" + passphrase);\n    this.channel.setKeyPair(keyPair);\n    this.setState({ keyPair, username });\n\n    // Save to local storage\n    window.localStorage.setItem(\"username\", username);\n    window.localStorage.setItem(\"passphrase\", passphrase);\n  }\n\n  logout() {\n    this.channel.setKeyPair(null);\n    this.setState({ keyPair: undefined });\n    window.localStorage.removeItem(\"username\");\n    window.localStorage.removeItem(\"passphrase\");\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Loading />;\n    }\n\n    return (\n      <DataContext.Provider\n        value={{\n          app: this,\n          posts: this.state.posts,\n          comments: this.state.comments,\n          votes: this.state.votes,\n          username: this.state.username,\n          keyPair: this.state.keyPair\n        }}\n      >\n        <Router>\n          <h1>\n            <Link to=\"/\">Axboard</Link>\n          </h1>\n          <Header />\n          <Switch>\n            <Route\n              path=\"/post/:id\"\n              render={({ match }) => <PostDetail id={match.params.id} />}\n            />\n            <Route\n              path=\"/u/:name/:publicKey\"\n              render={({ match }) => (\n                <UserDetail\n                  name={match.params.name}\n                  publicKey={match.params.publicKey}\n                />\n              )}\n            />\n            <Route path=\"/login\">\n              <LoginForm />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </Router>\n      </DataContext.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}