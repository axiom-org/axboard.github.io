{"version":3,"sources":["DataContext.ts","InputForm.tsx","NewPost.tsx","UserReference.tsx","Util.ts","PostSummary.tsx","PostList.tsx","BoardPage.tsx","Header.tsx","HomePage.tsx","Loading.tsx","LoginForm.tsx","NewBoard.tsx","ReplyForm.tsx","PostDetail.tsx","UserDetail.tsx","VoteSet.ts","App.tsx","serviceWorker.js","index.js"],"names":["DataContext","React","createContext","useDataContext","dc","useContext","Error","InputForm","props","_useState","useState","_useState2","Object","slicedToArray","content","setContent","react_default","a","createElement","onSubmit","e","preventDefault","console","log","concat","name","value","onChange","target","type","NewPost","data","id","setID","length","react_router","to","username","author","_ref","asyncToGenerator","regenerator_default","mark","_callee","post","wrap","_context","prev","next","app","createPost","board","sent","stop","_x","apply","this","arguments","UserReference","react_router_dom","publicKey","ago","date","helper","num","term","ms","Date","getTime","seconds","Math","floor","minutes","hours","days","months","PostSummary","comments","numComments","keys","commentsPhrase","boards","owner","timestamp","votes","getScore","onClick","upvote","downvote","PostList","posts","map","index","key","BoardPage","postlist","push","sort","b","Header","keyPair","getPublicKey","logout","HomePage","Loading","LoginForm","setUsername","_useState3","_useState4","passphrase","setPassphrase","login","alert","NewBoard","setName","description","setDescription","_useState5","_useState6","redirect","setRedirect","handleSubmit","abrupt","createBoard","replace","ReplyForm","createComment","parent","PostDetail","cmap","comment","UserDetail","VoteSet","classCallCheck","karma","score","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","vote","addVote","err","return","delta","abs","removeVote","modify","forget","App","_this","possibleConstructorReturn","getPrototypeOf","call","channel","postdb","commentdb","votedb","boarddb","node","AxiomAPI","network","verbose","createNode","database","useFilter","age","state","loading","loadData","setTimeout","window","localStorage","getItem","find","selector","commentlist","_iterator2","_iteratorNormalCompletion2","_step2","votelist","boardlist","_iterator3","_iteratorNormalCompletion3","_step3","setState","args","create","newPosts","objectSpread","newCommentSubmap","newComments","newBoards","forceUpdate","test","KeyPair","fromSecretPhrase","setKeyPair","setItem","removeItem","src_DataContext","Provider","path","render","match","params","_ref2","_ref3","Component","Boolean","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21485c56.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { AxiomObject, KeyPair } from \"axiom-api\";\n\nimport App from \"./App\";\nimport VoteSet from \"./VoteSet\";\n\ntype ObjectMap = { [id: string]: AxiomObject };\ntype CommentMap = { [parent: string]: ObjectMap };\n\ntype DataContextType = {\n  app: App;\n  posts: ObjectMap;\n  comments: CommentMap;\n  votes: VoteSet;\n  boards: ObjectMap;\n  username?: string;\n  keyPair?: KeyPair;\n};\n\nconst DataContext = React.createContext<DataContextType | null>(null);\n\nexport default DataContext;\n\nexport function useDataContext(): DataContextType {\n  let dc = useContext(DataContext);\n  if (dc === null) {\n    throw new Error(\"null context causes trouble\");\n  }\n  return dc;\n}\n","import React, { useState } from \"react\";\n\nexport default function InputForm(props: {\n  onSubmit: (content: string) => void;\n  name: string;\n}) {\n  let [content, setContent] = useState(\"\");\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    console.log(`submitting ${content}`);\n    props.onSubmit(content);\n    setContent(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {props.name}:<br />\n        <textarea value={content} onChange={e => setContent(e.target.value)} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\nimport InputForm from \"./InputForm\";\n\nexport default function NewPost(props: { board: string }) {\n  let data = useDataContext();\n  let [id, setID] = useState(\"\");\n\n  if (id.length > 0) {\n    return <Redirect to={`/post/${id}`} />;\n  }\n\n  if (!data.username) {\n    return <div>log in to post</div>;\n  }\n  let author: string = data.username;\n\n  return (\n    <InputForm\n      name={\"New post\"}\n      onSubmit={async content => {\n        let post = await data.app.createPost({\n          author: author,\n          board: props.board,\n          content: content\n        });\n        setID(post.id);\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function UserReference(props: {\n  username?: string;\n  publicKey: string;\n}) {\n  let username = props.username || \"anonymous\";\n  return <Link to={`/u/${username}/${props.publicKey}`}>{username}</Link>;\n}\n","// Creates a string like \"2 days ago\"\nexport function ago(date: Date): string {\n  let helper = (num: number, term: string) => {\n    if (num === 1) {\n      return `1 ${term} ago`;\n    }\n    return `${num} ${term}s ago`;\n  };\n\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  if (ms < 0) {\n    return \"in the future\";\n  }\n  if (ms < 1000) {\n    return \"just now\";\n  }\n  let seconds = Math.floor(ms / 1000);\n  if (seconds < 60) {\n    return helper(seconds, \"second\");\n  }\n  let minutes = Math.floor(seconds / 60);\n  if (minutes < 60) {\n    return helper(minutes, \"minute\");\n  }\n  let hours = Math.floor(minutes / 60);\n  if (hours < 24) {\n    return helper(hours, \"hour\");\n  }\n  let days = Math.floor(hours / 24);\n  if (days < 30) {\n    return helper(days, \"day\");\n  }\n  // This is a little bit inaccurate. Hopefully it's fine\n  let months = Math.floor(days / 30);\n  if (months < 12) {\n    return helper(months, \"month\");\n  }\n  let years = Math.floor(months / 12);\n  return helper(years, \"year\");\n}\n\nexport function daysAgo(date: Date): number {\n  let msPerDay = 1000 * 60 * 60 * 24;\n  let now = new Date();\n  let ms = now.getTime() - date.getTime();\n  return ms / msPerDay;\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\nimport { Link } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\nimport UserReference from \"./UserReference\";\nimport { ago } from \"./Util\";\n\nexport default function PostSummary(props: { post: AxiomObject }) {\n  let data = useDataContext();\n  let comments = data.comments[props.post.id];\n  let numComments = comments ? Object.keys(comments).length : 0;\n  let commentsPhrase = `${numComments} comment${numComments === 1 ? \"\" : \"s\"}`;\n\n  let board = data.boards[props.post.data.board];\n\n  return (\n    <div>\n      <hr />\n      {props.post.data.content}\n      <div>\n        posted by{\" \"}\n        <UserReference\n          username={props.post.data.author}\n          publicKey={props.post.owner}\n        />{\" \"}\n        {ago(props.post.timestamp)}\n        {board && (\n          <div>\n            in{\" \"}\n            <Link to={`/b/${board.name}/${board.id}`}>{`b/${board.name}`}</Link>\n          </div>\n        )}\n      </div>\n      <Link to={`/post/${props.post.id}`}>{commentsPhrase}</Link>\n      <div>score: {data.votes.getScore(props.post.id)}</div>\n      <div onClick={() => data.app.upvote(props.post.id)}>upvote</div>\n      <div onClick={() => data.app.downvote(props.post.id)}>downvote</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\n\nimport PostSummary from \"./PostSummary\";\n\nexport default function PostList(props: { posts: AxiomObject[] }) {\n  return (\n    <div>\n      {props.posts.map((post, index) => {\n        return <PostSummary key={index} post={post} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport NewPost from \"./NewPost\";\nimport PostList from \"./PostList\";\n\nexport default function BoardPage(props: { id: string; name?: string }) {\n  let data = useDataContext();\n\n  let board = data.boards[props.id];\n  if (!board) {\n    return <div>board not found</div>;\n  }\n  if (props.name && props.name !== board.name) {\n    return <div>the board has been renamed</div>;\n  }\n\n  let postlist = [];\n  for (let id in data.posts) {\n    let post = data.posts[id];\n    if (post.data.board === props.id) {\n      postlist.push(post);\n    }\n  }\n  postlist.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>{\"b/\" + board.name}</h2>\n      <NewPost board={board.id} />\n      <hr />\n      <PostList posts={postlist} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\n\nexport default function Header() {\n  let data = useDataContext();\n\n  if (!data.keyPair) {\n    return <Link to={\"/login\"}>log in</Link>;\n  }\n  return (\n    <div>\n      <p>logged in as {data.keyPair.getPublicKey()}</p>\n      <div onClick={() => data.app.logout()}>log out</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport PostList from \"./PostList\";\n\nexport default function HomePage() {\n  let data = useDataContext();\n  let postlist = [];\n  for (let id in data.posts) {\n    let post = data.posts[id];\n    postlist.push(post);\n  }\n  postlist.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>Home Page</h2>\n      <PostList posts={postlist} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Loading() {\n  return <div>loading...</div>;\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\n\nexport default function LoginForm() {\n  let data = useDataContext();\n  let [username, setUsername] = useState(\"\");\n  let [passphrase, setPassphrase] = useState(\"\");\n\n  if (data.keyPair) {\n    // Already logged in\n    return <Redirect to=\"/\" />;\n  }\n\n  let handleSubmit = (e: any) => {\n    e.preventDefault();\n    // TODO: focus the first empty field if there is one\n    try {\n      data.app.login(username, passphrase);\n    } catch (e) {\n      // TODO: display this more nicely\n      alert(e);\n      setUsername(\"\");\n      setPassphrase(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        username:\n        <br />\n        <input\n          type=\"text\"\n          value={username}\n          onChange={e => setUsername(e.target.value)}\n        />\n      </label>\n      <br />\n      <label>\n        passphrase:\n        <br />\n        <input\n          type=\"password\"\n          value={passphrase}\n          onChange={e => setPassphrase(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"log in\" />\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useDataContext } from \"./DataContext\";\n\nexport default function NewBoard() {\n  let [name, setName] = useState(\"\");\n  let [description, setDescription] = useState(\"\");\n  let [redirect, setRedirect] = useState(\"\");\n\n  let data = useDataContext();\n  if (!data.username) {\n    return <div>You must log in to create a new board.</div>;\n  }\n\n  if (redirect !== \"\") {\n    return <Redirect to={redirect} />;\n  }\n\n  let handleSubmit = async (e: any) => {\n    e.preventDefault();\n    if (name.length < 3) {\n      alert(\"name too short\");\n      return;\n    }\n    console.log(`creating board with name: ${name}`);\n    let board = await data.app.createBoard({ description }, name);\n    console.log(board);\n    setRedirect(`/b/${board.name}/${board.id}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        create a new board.\n        <br />\n        name:\n        <br />\n        <input\n          value={name}\n          onChange={e => setName(e.target.value.replace(/[\\W_]/g, \"\"))}\n        />\n      </label>\n      <label>\n        description:\n        <br />\n        <textarea\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n","import React from \"react\";\nimport { AxiomObject } from \"axiom-api\";\n\nimport { useDataContext } from \"./DataContext\";\nimport InputForm from \"./InputForm\";\n\nexport default function ReplyForm(props: { post: AxiomObject }) {\n  let data = useDataContext();\n  if (!data.username) {\n    return null;\n  }\n  let author: string = data.username;\n\n  return (\n    <InputForm\n      name={\"Reply\"}\n      onSubmit={async content => {\n        await data.app.createComment({\n          author,\n          board: props.post.data.board,\n          content,\n          parent: props.post.id\n        });\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport ReplyForm from \"./ReplyForm\";\nimport UserReference from \"./UserReference\";\nimport { ago } from \"./Util\";\n\nexport default function PostDetail(props: { id: string }) {\n  let data = useDataContext();\n  let post = data.posts[props.id];\n  if (!post) {\n    return <div>post not found</div>;\n  }\n  let cmap = data.comments[props.id];\n\n  let comments = [];\n  for (let key in cmap) {\n    comments.push(cmap[key]);\n  }\n  comments.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>Post Detail ({props.id})</h2>\n      {post.data.content}\n      {comments.map((comment, index) => (\n        <p key={index}>\n          Comment: {comment.data.content}\n          <br />\n          by{\" \"}\n          <UserReference\n            username={comment.data.author}\n            publicKey={comment.owner}\n          />{\" \"}\n          ({ago(comment.timestamp)})\n        </p>\n      ))}\n      <ReplyForm post={post} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { useDataContext } from \"./DataContext\";\nimport PostList from \"./PostList\";\n\nexport default function UserDetail(props: { name: string; publicKey: string }) {\n  let data = useDataContext();\n\n  let postlist = [];\n  for (let id in data.posts) {\n    let post = data.posts[id];\n    if (post.owner === props.publicKey) {\n      postlist.push(post);\n    }\n  }\n  postlist.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n  return (\n    <div>\n      <h2>\n        posts from {props.name} ({props.publicKey}\n        ):\n      </h2>\n      <PostList posts={postlist} />\n    </div>\n  );\n}\n","import { AxiomObject } from \"axiom-api\";\n\nexport default class VoteSet {\n  // Karma for each user\n  karma: { [publicKey: string]: number };\n\n  // Score for each object voted on\n  score: { [id: string]: number };\n\n  // Keyed by owner:target\n  votes: { [key: string]: AxiomObject };\n\n  constructor(votes: AxiomObject[]) {\n    this.karma = {};\n    this.score = {};\n    this.votes = {};\n\n    for (let vote of votes) {\n      this.addVote(vote);\n    }\n  }\n\n  modify(target: string, owner: string, delta: number) {\n    if (this.score[target]) {\n      this.score[target] += delta;\n    } else {\n      this.score[target] = delta;\n    }\n\n    if (this.karma[owner]) {\n      this.karma[owner] += delta;\n    } else {\n      this.karma[owner] = delta;\n    }\n  }\n\n  getScore(id: string): number {\n    return this.score[id] || 0;\n  }\n\n  getKarma(publicKey: string): number {\n    return this.karma[publicKey] || 0;\n  }\n\n  getVote(owner: string, target: string): AxiomObject | null {\n    let key = `${owner}:${target}`;\n    return this.votes[key] || null;\n  }\n\n  addVote(vote: AxiomObject) {\n    if (Math.abs(vote.data.score) !== 1 || !vote.data.target) {\n      return;\n    }\n\n    let key = `${vote.owner}:${vote.data.target}`;\n    if (this.votes[key]) {\n      this.removeVote(this.votes[key]);\n    }\n    this.modify(vote.data.target, vote.owner, vote.data.score);\n    this.votes[key] = vote;\n  }\n\n  removeVote(vote: AxiomObject) {\n    let key = `${vote.owner}:${vote.data.target}`;\n    if (this.votes[key] !== vote) {\n      console.log(\"bad removeVote\");\n      return;\n    }\n\n    delete this.votes[key];\n    this.modify(vote.data.target, vote.owner, -vote.data.score);\n    vote.forget();\n  }\n}\n","import React from \"react\";\nimport AxiomAPI, { AxiomObject, Channel, Database, KeyPair } from \"axiom-api\";\nimport { HashRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport BoardPage from \"./BoardPage\";\nimport DataContext from \"./DataContext\";\nimport Header from \"./Header\";\nimport HomePage from \"./HomePage\";\nimport Loading from \"./Loading\";\nimport LoginForm from \"./LoginForm\";\nimport NewBoard from \"./NewBoard\";\nimport PostDetail from \"./PostDetail\";\nimport UserDetail from \"./UserDetail\";\nimport { daysAgo } from \"./Util\";\nimport VoteSet from \"./VoteSet\";\n\ntype ObjectMap = { [id: string]: AxiomObject };\ntype CommentMap = { [parent: string]: ObjectMap };\ntype AppProps = {};\ntype AppState = {\n  posts: ObjectMap;\n  comments: CommentMap;\n  votes: VoteSet;\n  boards: ObjectMap;\n  keyPair?: KeyPair;\n  username?: string;\n  loading: boolean;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  channel: Channel;\n  postdb: Database;\n  commentdb: Database;\n  votedb: Database;\n  boarddb: Database;\n\n  constructor(props: AppProps) {\n    super(props);\n\n    let axiom = new AxiomAPI({ network: \"alpha\", verbose: true });\n    let node = axiom.createNode();\n    this.channel = node.channel(\"Axboard\");\n\n    this.postdb = this.channel.database(\"Posts\");\n    let postFilter = (post: AxiomObject): boolean => {\n      let age = daysAgo(post.timestamp);\n      if (age > 2 || age < -0.05) {\n        return false;\n      }\n      return true;\n    };\n    this.postdb.useFilter(postFilter);\n\n    this.commentdb = this.channel.database(\"Comments\");\n    this.votedb = this.channel.database(\"Votes\");\n    this.boarddb = this.channel.database(\"Boards\");\n\n    this.state = {\n      posts: {},\n      comments: {},\n      votes: new VoteSet([]),\n      boards: {},\n      keyPair: undefined,\n      username: undefined,\n      loading: true\n    };\n\n    // Async but no need to wait for a response\n    this.loadData();\n\n    // Must be async because it can call setState. TODO: refactor and avoid\n    setTimeout(() => {\n      let username = window.localStorage.getItem(\"username\");\n      let passphrase = window.localStorage.getItem(\"passphrase\");\n      if (username && passphrase) {\n        this.login(username, passphrase);\n      }\n    }, 0);\n  }\n\n  async loadData(): Promise<void> {\n    let postlist = await this.postdb.find({ selector: {} });\n    let posts: ObjectMap = {};\n    for (let post of postlist) {\n      posts[post.id] = post;\n    }\n\n    let commentlist = await this.commentdb.find({ selector: {} });\n    let comments: CommentMap = {};\n    for (let comment of commentlist) {\n      let parent = comment.data.parent;\n      if (!comments[parent]) {\n        comments[parent] = {};\n      }\n      comments[parent][comment.id] = comment;\n    }\n\n    let votelist = await this.votedb.find({ selector: {} });\n    let votes = new VoteSet(votelist);\n\n    let boardlist = await this.boarddb.find({ selector: {} });\n    let boards: ObjectMap = {};\n    for (let board of boardlist) {\n      boards[board.id] = board;\n    }\n\n    this.setState({\n      posts,\n      comments,\n      votes,\n      boards,\n      loading: false\n    });\n  }\n\n  async createPost(args: {\n    author: string;\n    board: string;\n    content: string;\n  }): Promise<AxiomObject> {\n    let post = await this.postdb.create(args);\n    this.setState(state => {\n      let newPosts = { ...state.posts };\n      newPosts[post.id] = post;\n      return { ...state, posts: newPosts };\n    });\n    return post;\n  }\n\n  async createComment(args: {\n    author: string;\n    board: string;\n    content: string;\n    parent: string;\n  }): Promise<AxiomObject> {\n    let comment = await this.commentdb.create(args);\n    this.setState(state => {\n      let newCommentSubmap = { ...state.comments[args.parent] };\n      newCommentSubmap[comment.id] = comment;\n      let newComments = { ...state.comments };\n      newComments[args.parent] = newCommentSubmap;\n      return { ...state, comments: newComments };\n    });\n    return comment;\n  }\n\n  async createBoard(\n    args: {\n      description: string;\n    },\n    name: string\n  ): Promise<AxiomObject> {\n    let board = await this.boarddb.create(args, name);\n    this.setState(state => {\n      let newBoards = { ...state.boards };\n      newBoards[board.id] = board;\n      return { ...state, boards: newBoards };\n    });\n    return board;\n  }\n\n  async vote(args: { target: string; score: number }): Promise<AxiomObject> {\n    let vote = await this.votedb.create(args);\n    this.state.votes.addVote(vote);\n    this.forceUpdate();\n    return vote;\n  }\n\n  async upvote(target: string): Promise<AxiomObject> {\n    return await this.vote({ target, score: 1 });\n  }\n\n  async downvote(target: string): Promise<AxiomObject> {\n    return await this.vote({ target, score: -1 });\n  }\n\n  login(username: string, passphrase: string) {\n    let regex = /^[A-Za-z0-9_]+$/;\n    if (!regex.test(username)) {\n      throw new Error(`invalid username: ${username}`);\n    }\n    let keyPair = KeyPair.fromSecretPhrase(username + \";\" + passphrase);\n    this.channel.setKeyPair(keyPair);\n    this.setState({ keyPair, username });\n\n    // Save to local storage\n    window.localStorage.setItem(\"username\", username);\n    window.localStorage.setItem(\"passphrase\", passphrase);\n  }\n\n  logout() {\n    this.channel.setKeyPair(null);\n    this.setState({ keyPair: undefined });\n    window.localStorage.removeItem(\"username\");\n    window.localStorage.removeItem(\"passphrase\");\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Loading />;\n    }\n\n    return (\n      <DataContext.Provider\n        value={{\n          app: this,\n          posts: this.state.posts,\n          comments: this.state.comments,\n          votes: this.state.votes,\n          boards: this.state.boards,\n          username: this.state.username,\n          keyPair: this.state.keyPair\n        }}\n      >\n        <Router>\n          <h1>\n            <Link to=\"/\">Axboard</Link>\n          </h1>\n          <Header />\n          <Switch>\n            <Route\n              path=\"/post/:id\"\n              render={({ match }) => <PostDetail id={match.params.id} />}\n            />\n            <Route\n              path=\"/u/:name/:publicKey\"\n              render={({ match }) => (\n                <UserDetail\n                  name={match.params.name}\n                  publicKey={match.params.publicKey}\n                />\n              )}\n            />\n            <Route\n              path=\"/b/:name/:id\"\n              render={({ match }) => (\n                <BoardPage name={match.params.name} id={match.params.id} />\n              )}\n            />\n            <Route path=\"/login\">\n              <LoginForm />\n            </Route>\n            <Route path=\"/newboard\">\n              <NewBoard />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </Router>\n      </DataContext.Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}